#--------------------------------------------------------------------------------------------------
# Makefile
# Для cборки Novel Fox Engine
# Платформы: MacOS, Linux
#--------------------------------------------------------------------------------------------------
# Вызов make по умолчанию приведет к сборке debug-версии
#
# Для сборки конкретной версии указать параметры:
# make debug     ИЛИ   make BUILD=debug
# make release   ИЛИ   make BUILD=release
#
# Очистка make clean удалит все сборочные файлы обоих версий
# Для очистки конкретной версии:
# make clean_debug
# make clean_release
#--------------------------------------------------------------------------------------------------
UNAME := $(shell uname)
#--------------------------------------------------------------------------------------------------
# Компиляторы:
CC := g++ -std=c++11
OC := gcc
# Флаги компиляции:
CF := -c -MD -Wall
#--------------------------------------------------------------------------------------------------
# Директории с исходным кодом:
SOURCE_DIRS := . Modules Engine
# Имя исполняемого файла:
OUTFILE     := game
#--------------------------------------------------------------------------------------------------
# Специализация для Linux
ifeq ($(UNAME), Linux)
    PR := /home/snipghost/Documents/Frameworks
    CF += -I$(PR)/include
    LF := -L$(PR)/lib -lsfml-audio -lsfml-graphics -lsfml-window -lsfml-system
    LF += -lsfeMovie-d
endif
#--------------------------------------------------------------------------------------------------
# Специализация для OS X
ifeq ($(UNAME), Darwin)
    PR := -framework
    LF := $(PR) sfml-window $(PR) sfml-graphics $(PR) sfml-system $(PR) sfml-audio
    LF += $(PR) sfeMovie
    LF += $(PR) Foundation
    PATHFINDER := pathfinder.o
endif
#--------------------------------------------------------------------------------------------------
# Проверяем в какой вариации хотим собрать проект
ifneq ($(BUILD), release)
    BUILD := debug
    CF    += -DDEBUG
endif
#--------------------------------------------------------------------------------------------------
MAKEDIR     := $(shell mkdir -p $(BUILD))
EXE         := $(BUILD)/$(OUTFILE)
WILDCARDS   := $(addsuffix /*.cpp,$(SOURCE_DIRS)) 
DEPENDENTS  := $(notdir $(patsubst %.cpp,%.o,$(wildcard $(WILDCARDS)))) $(PATHFINDER)
DEPENDENTS  := $(addprefix $(BUILD)/,$(DEPENDENTS))
#--------------------------------------------------------------------------------------------------
all: $(EXE)
#--------------------------------------------------------------------------------------------------
# Сборка проекта в двух вариантах
.PHONY: release debug   
release debug:
	make BUILD=$@
#--------------------------------------------------------------------------------------------------
# Линковка модулей
$(EXE): $(DEPENDENTS)
	$(CC) $^ $(LF) -o $@
#--------------------------------------------------------------------------------------------------
# Устанавливаем переменную для осуществления поиска зависимостей
VPATH := $(SOURCE_DIRS)
#--------------------------------------------------------------------------------------------------
# Сборка модулей на C++ и Objective-C
$(BUILD)/%.o: %.cpp
	$(CC) $(CF) $(addprefix -I,$(SOURCE_DIRS)) $< -o $@
$(BUILD)/%.o: %.mm
	$(OC) $(CF) $(addprefix -I,$(SOURCE_DIRS)) $< -o $@
#--------------------------------------------------------------------------------------------------
# Собираем перечень зависимостей, в случае изменений - очистить проект перед сборкой
include $(wildcard *.d) 
#--------------------------------------------------------------------------------------------------
clean_debug:
	rm -rf $(addprefix debug/,*.o *.d $(OF))
clean_release:
	rm -rf $(addprefix release/,*.o *.d $(OF))
clean: clean_debug clean_release
#--------------------------------------------------------------------------------------------------
# Запустить исполняемый файл debug-сборки
run: debug/$(OUTFILE)
	./start ./Frameworks
#--------------------------------------------------------------------------------------------------
